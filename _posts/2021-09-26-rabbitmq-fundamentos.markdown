---
layout: post
title:  "RabbitMq Fundamentos - parte 1 de 3"
date:   2021-09-26 08:00:00 -0300
categories: Microservicos
---
RabbitMq √© um "message broker" baseado no protocolo AMQP totalmente *opensource*, ou seja gratu√≠to e aberto, o que permite aprender como foi feito e ainda podendo ser melhorado por voc√™!:bowtie:

Protocolo AMQP
==============
**Advanced Message Queuing Protocol**, ou Protocolo de Enfileiramento de Mensagens Avan√ßado. *tradu√ß√£o livre*.  :sweat_smile:  
Estabelece regras e comportamentos entre a comunica√ß√£o de **Publishers**{: style="color: red"}, **Message Brokers**{: style="color: red"} e **Consumers**{: style="color: red"}.  

>Mas o que √© um Message Broker? :sweat_smile:  

Eu defino assim: "√â um agente de gerenciamento de mensagens, ele garante o recebimento e a entrega de mensagens".  
As mensagens s√£o enviadas por **Pubilishers** e processadas por **Consumers**.  

Podemos ter uma vis√£o geral do Protocolo AMQP atrav√©s da imagem abaixo.  
![RabbitMq hello world](../../../../assets/2021-09-23-rabbitmq-fundamentos/hello-world-example-routing.png)  
A imagem acima foi extra√≠da da [p√°gina oficial do RabbitMq](https://www.rabbitmq.com/tutorials/amqp-concepts.html) e demonstra o funcionamento b√°sico do protocolo AMQP 0-9-1.  
*O* *publisher*{: style="color: red"} *publica uma mensagen no* *broker*{: style="color: red"} *que atrav√©s de seu* *binding*{: style="color: red"} *envia uma c√≥pia da mensagem para sua fila (* *queue*{: style="color: red"}) *e por fim √© consumida no* *consumer*{: style="color: red"}.  

De forma mais detalhada, podemos observar nessa imagem que h√° uma aplica√ß√£o do tipo **PUBLISHER**{: style="color: red"}, respons√°vel por criar as mensagens e public√°-las em um **EXCHANGE**{: style="color: red"}. *Exchanges* s√£o parte da composi√ß√£o do **Message Broker**{: style="color: red"} que na imagem acima aparece destacado em um ret√¢ngulo sombreado.  
Quando um *Exchange* recebe uma mensagem ele pode distribuir c√≥pias dessa mensagem para alguma, algumas ou at√© mesmo para nenhuma fila, usando regras chamadas **BINDINGS**{: style="color: red"}. E ent√£o o *Broker* entrega as mensagens para os consumidores, que podem assinar a fila atrav√©s de uma *sbscription*{: style="color: red"}, nesse caso os consumidores s√£o considerados **passivos**, pois recebem as mensagens do *Broker* conforme elas v√£o sendo entregues para a fila. Ou os consumidores podem buscar as mensagens na fila, quando bem entenderem e portanto neste caso s√£o considerados **ativos**.  

O Agente de Gerenciamento de Mensagens *(Message Broker)* √© composto dos seguintes m√≥dulos:  

**Exchange**
: √© o agente *intercambiador* das mensagens recebidas, podemos dizer que √© algo similar a uma ag√™ncia dos correios, *s√≥ que bem mais eficiente*. :joy::joy::joy:  

**Bindings**
: Composi√ß√£o de regras que definem o destino da mensagem  

**Queues**
: reposit√≥rio de mensagens que ser√£o consumidas em ordem, ou seja, uma *fila*.  

> Todos esses elementos apresentados at√© o momento:
: * Publishers
* Exchanges
* Bindings
* Queues
* Consumers  
> S√£o denomidados ***Entidades do protocolo AMQP***.

Resili√™ncia
===========
A comunica√ß√£o via rede de dados pode falhar, n√£o √© confi√°vel! O consumidor da mensagem tamb√©m pode falhar, pode sofrer um **crash** durante o processamento da mensagem ou at√© mesmo perder a conex√£o com a fila. √â por isso que no protocolo AMQP existe a defini√ß√£o de *message acknowledgement*{: style="color : red"} **(confirma√ß√£o de recebimento ou processamento de mensagens)**.  
Quando uma mensagem √© entregue para o *consumer*, o *consumer* notifica o *broker* ap√≥s o processamento da mensagem, ou assim que pega a mensagem **(se n√£o houver necessidade de garantir que a mensagem foi processada)**.  
O *Message Acknowledgement*{: style="color : red"}, portanto, pode ser considerado um dispositivo de seguran√ßa importante, que garante a entrega e/ou o processamento das mensagens com sucesso.  

Pode acontecer tamb√©m de o *Exchange* n√£o ser capaz de endere√ßar a mensagem a uma fila e neste caso o *Broker* devolve essas mensagens para o *Publisher*, ou at√© mesmo enviar as mensagens para uma fila conhecida como **"dead letter queue"**{: style="color : red"}.  

Flexibilidade
=============
O protocolo AMQP √© conhecido por ser um protocolo program√°vel, isso significa que a cria√ß√£o e comportamento de suas *Entidades* devem ser primariamente definidas na pr√≥pria aplica√ß√£o: *publishers/consumers*.  
Ou seja, √© a pr√≥pria aplica√ß√£o que declara as entidades do protocolo AMQP necess√°rias.  

Exchanges e seus tipos
======================

No protocolo AMQP podemos escolher entre 4 tipos diferentes de *Exchange* a escolha de cada tipo depende muito do que se deseja fazer com as mensagens. Por isso abaixo explicarei um pouco como funciona cada um deles:  

* Direct
* Fanout
* Topic
* Header
{: style="margin-left : 20px"}

Todos os *Exchanges* possuem atributos, os atributos definem como podemos configurar o comportamento do *Exchange*. Abaixo temos os principais atributos:  

* Name (*nome do exchange*)
* Durability (*define se o exchange permanecer√° existindo no caso do broker ser reiniciado*)
* Auto-delete (*o exchange ser√° exclu√≠do assim que sua ultima fila for desplugada de seu binding*)
{: style="margin-left : 20px"}

##### Direct Exchange
![Direct Exchange](../../../../assets/2021-09-23-rabbitmq-fundamentos/exchange-direct.png)  

Esse tipo de *Exchange* envia a mensagem para sua fila atrav√©s do *routing key*, a fila ter√° o mesmo nome do *routing key*. Podemos ter multiplas inst√¢ncias do consumer de cada fila, assim as mensagens podem ser consumidas simultaneamente escalando o consumer.  

Na imagem acima temos 4 consumers do lado direito, 2 consumers tem binding para a routing key "images.archive", cada consumer recebe somente a mensagem com o routing key ao qual tem o binding, quando o consumer possu√≠ mais de uma inst√¢ncia, o *Broker* √© respons√°vel por balancear o envio das mensagens para eles.

##### Funout Exchange  
![Fanout Exchange](../../../../assets/2021-09-23-rabbitmq-fundamentos/exchange-fanout.png)  

Todas as filas desse tipo de exchange recebe uma c√≥pia da mensagem, ent√£o os consumers conectados √†s filas ir√£o processar a mesma mensagem. Esse tipo de Exchange n√£o utiliza o routing key.
Na imagem acima podemos ver esse comportamento.  
Resumidamente, podemos ter 200 filas ligadas nesse Exchange e todas as 200 filas ir√£o receber a mesma mensagem, por√©m cada fila ter√° o seu consumer espec√≠fico, cada um realizando tarefas distintas, mas sempre com a mesma mensagem.

##### Topic Exchange  
![Topic Exchange](../../../../assets/2021-09-23-rabbitmq-fundamentos/exchange-topic.jpg)  
Similar ao Fanout, por√©m, nesse tipo a routing key √© utilizado para enviar a mensagem a uma fila de acordo com o padr√£o descrito no binding.  
Na imagem acima √© poss√≠vel observar que o *Exchange* envia a mensagem para uma fila de acordo com o padr√£o da routing key, o caractere '\*' funciona como um caractere coringa, ent√£o podemos concluir que a *queue1* aceita qualquer routing key que contenha a a palavra '[qualquer texto].payroll.[qualquer texto]', na *queue2* a routing key deve ter '[qualquer texto].hr.recuitment' e a *queue3* aceitar√° todas as mensagens que contenham na routing key 3 palavras separadas por pontos.  
 Sendo assim a *queue3* receber√° todas as mensagens que v√£o para a *queue1* e *queue2*  

> Importante notar que a composi√ß√£o da routing key e feita sempre separada por *pontos*.

##### Header Exchange  
![Header Exchange](../../../../assets/2021-09-23-rabbitmq-fundamentos/exchange-headers.jpg)  
Esse tipo de Exchange usa uma esp√©cie de cabe√ßalho na mensagem para realizar o envio da mensagem para a fila. Portanto, *Header Exchange* √© uma esp√©cie melhorada de *Direct Exchange* pois ao inv√©s de utilizar a *routing key* esse Exchange utiliza o Header da mensagem que possui mais atributos do que uma simples *routing key*.  
Ent√£o na imagem acima, podemos ver que o *Exchange* envia mensagens com cabe√ßalho onde o material √© *wood (madeira)* para a *queue1* e mensagens com cabe√ßalho onde o material for *metal* ir√£o para a *queue2*. E assim cada consumer pode aplicar regras de neg√≥cios distintas para cada mensagem, sabendo que no *consumer1* s√≥ chegar√° *wood/madeira* e no *consumer2* s√≥ chegar√° metal. 

Conclus√£o da primeira parte
===========================

RabbitMq √© um poderoso *Message Broker* baseado no protocolo AMQP 0-9-1.  
Com ele podemos fazer a comunica√ß√£o entre aplica√ß√µes de microservi√ßos diferentes de maneira escal√°vel e resiliente.  
Nessa primeira parte trouxe os conceitos fundamentais do protocolo AMQP, na pr√≥xima parte pretendo aprofundar um pouco mais nas filas e seus atributos e por fim em uma 3¬™ parte fazer algumas demos.  

Espero que gostem do material, e indiquem para que quiser aprender sobre RabbitMq, se tiverem duvidas ou sugest√µes, ficarei muito feliz em responder! üôÇ  

- - -  

